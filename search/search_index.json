{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#mosaic","title":"Mosaic","text":"<p> Mosaic is a collection of Jetpack Compose UI components and utilities. It is designed to accelerate the development process by providing a rich set of tools and components that are ready to use out of the box. These components are highly customizable ensuring to fit in your use case.  </p>"},{"location":"#libraries","title":"Libraries","text":""},{"location":"#mosaic-slider","title":"\ud83c\udf9b\ufe0f Mosaic Slider","text":"<p>Mosaic Slider is a highly customizable slider component that allows precise customization of values distribution and disabled ranges. Its API is similar to Material sliders, making it easy to integrate into existing projects.</p>"},{"location":"#non-linear-distribution","title":"Non-linear distribution","text":""},{"location":"#disabled-sub-range","title":"Disabled sub-range","text":""},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our contributing guidelines for more details.</p>"},{"location":"#license","title":"License","text":"<p>Mosaic is licensed under the MIT License. See LICENSE for more details.</p>"},{"location":"#made-with-by","title":"Made with \u2764\ufe0f by","text":""},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to Mosaic will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#100-14052024","title":"[1.0.0] - 14.05.2024","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>With our first Mosaic Release \ud83c\udf89 we introduce the first compoment that makes it to the Mosaic Collection: Mosaic Slider.</li> <li>Mosaic Slider offers a wide range of customization including custom Thumbs, custom Values Distribution and more</li> <li>You can learn more about Mosaic on our documentation page</li> </ul>"},{"location":"contributing/","title":"How to Contribute","text":"<p>We'd love to accept your patches and contributions to Mosaic, wether its a new component / tool or an update to existing ones! There are just a few small guidelines you need to follow :) </p>"},{"location":"contributing/#new-featureslibraries","title":"New Features/Libraries","text":"<p>Before contributing large new features and/or library please reach out with discussion first.</p>"},{"location":"contributing/#code-reviews","title":"Code Reviews","text":"<p>All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests.</p>"},{"location":"contributing/#cicd-checks","title":"CI/CD Checks","text":"<p>We have a GitHub Actions workflow that is being activated as part of any raised Pull Request, it will run the tests, spotless and detekt checks.</p> <p>You can also run this locally to make sure the PR will pass these checks:</p> <ul> <li> <p>Spotless: Run <code>./gradlew spotlessApply</code> to apply formatting to the code according to the spec. </p> </li> <li> <p>Detekt: Run <code>./gradlew detekt</code> to run static code analysis using Detekt.</p> </li> </ul>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Monstarlab Open Source Software</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"slider/","title":"Mosaic Slider","text":"<p>Mosaic Slider is an \"upgrade\" from the Material Slider provided by Google. The API is very similar, but allows more  customizations that might be useful to the end users. </p> <p>Mosaic Slider features includes:</p> <ul> <li>Customisable thumb</li> <li>Customisable track (Using <code>Modifiers</code>)</li> <li>Ability to set disabled ranges</li> <li>Ability to provide custom Values Distributions to controll how user interacts with the slider</li> </ul>"},{"location":"slider/#installation","title":"Installation","text":"<p>The artifact is published on Maven Central, make sure you have this repository configured in your <code>settings.gradle</code> or its alternative</p> <pre><code>dependencyResolutionManagement {\n    repositories {\n        mavenCentral()\n    }\n}\n</code></pre> <p>Add dependency to the app module</p> <pre><code>implementation(\"io.monstarlab.mosaic:slider:[version]\")\n</code></pre>"},{"location":"slider/#basic-usage","title":"Basic Usage","text":"<p>The API of the Mosaic Slider is very similar to the one provided in Material libraries. The basic usage invlovles providing state (<code>float</code> value), a callback to change the state and colors</p> <p>Most likely you would also want to provide your custom range for the slider</p> <pre><code>var sliderValue by remember { mutableFloatStateOf(50f) }\n\nMosaciSlider(\n    value = sliderValue,\n    onValueChange = { newValue -&gt; sliderValue = newValue },\n    colors = MosaicSliderColors(Color.Green),\n    range = 0f..100f\n)\n</code></pre> <p>Alternatively there is an option to declare the slider using <code>rememberMosaicSliderState</code> function </p> <pre><code>val slideState = rememberMosaicSliderState(\n    initialValue = 50f,\n    range = 0f..100f\n)\n\nMosaicSlider(\n    state = slideState,\n    colors = MosaicSliderColors(Color.Green)\n)\n</code></pre>"},{"location":"slider/#customizations","title":"Customizations","text":"<p>Mosaic Slider provides several APIs to enable you to customize its behaviour and visuals. This section provides and overview about these APIs</p>"},{"location":"slider/#thumb-customization","title":"Thumb customization","text":"<p>By default, Mosaic Slider has its own Slider Thumb which resembles the thumb you would see in a Material component. If you want to have your own custom Thumb it is very easy to do so :) </p> <p>Following example has a custom thumb that displays current value and animates its size based on wether user drags it or not</p> <pre><code> MosaicSlider(\n    state = slideState,\n    colors = MosaicSliderColors(Color.Green),\n    thumb = { state -&gt;\n     val size = animateDpAsState(\n            targetValue = if (state.isDragging) {\n                32.dp\n            } else {\n                24.dp\n            })\n        Box(\n            modifier = Modifier\n                .size(size.value)\n                .background(Color.Red, shape = CircleShape)\n            ) {\n                Text(\n                    text = state.value.roundToInt().toString(),\n                    modifier = Modifier.align(Alignment.Center),\n                    fontSize = 12.sp\n                )\n            }\n        }\n    )\n</code></pre>"},{"location":"slider/#disabled-tracks","title":"Disabled tracks","text":"<p>Sometimes you want to limit slider range to some extent while still showing the full range. This can be done using <code>disabledRange</code>  By specifying disabled range you limit where user can drag the thumb, thus making sure the values from the <code>disabledRange</code> wont be selected</p> <p></p> <p>You can specifiy the <code>disabledRange</code> in two ways, depending on how you manage the slider state </p> <pre><code>val slideState = rememberMosaicSliderState(\n    initialValue = 10f,\n    range = 0f..100f,\n    disabledRange = 40f..60f // disables range from 40 to 60\n)\n</code></pre> <p>Or when using state-less option</p> <pre><code>MosaicSlider(\n    value = 10f,\n    onValueChange = { },\n    colors = MosaicSliderColors(Color.Green),\n    disabledRange = 40f..60f,\n)\n</code></pre> <p>Finally you might want to provide custom colors for this range to make sure the it is obvious to the User. </p> <p>The color of the disabled range is controlled by the <code>disabledRangeTrackColor</code> property of <code>AppColors</code>. By default it is the same as the <code>activeTrackColor</code></p> <pre><code>val colors = MosaicSliderColors(\n    activeTrackColor = Color.Green, \n    disabledRangeTrackColor = Color.Red\n)\n// pass colors to the composable\n...\n</code></pre>"},{"location":"slider/#custom-values-distributions","title":"Custom Values Distributions","text":"<p>Most of the Sliders have Linear values distribution, meaning that the values are evenly distributed along the range of the slider. Mosaic Slider provides the flexibility to define custom values distributions. </p> <p>This allows you to control how the user interacts with the slider, the specific values that can be selected and how sensetive the slider is to the changes on some segments so that the users selection is more precise.</p> <p></p>"},{"location":"slider/#linear-values-distribution","title":"Linear Values Distribution","text":"<p>By default, Mosaic Slider will use <code>SliderValuesDistribution.Linear</code> which would arrange values in a linear fashion just like any other Slider</p>"},{"location":"slider/#parabolic-values-distribution","title":"Parabolic Values Distribution","text":"<p>Parabolic Values Distribution allows you to arrange your values in parabolic fashion. For this, you would have to provide your <code>a</code>,<code>b</code> and <code>c</code> values for the <code>ax\u02c62 + bx+ c</code> equation.</p> <p>Note</p> <p>Note that curve must be increasing in Y-value for the slider to work properly. Also since parabolic curve is symetric only one value will be used when inversing it </p> <pre><code>val myDistribution = SliderValuesDistribution.parbolic(a, b, c)\n</code></pre>"},{"location":"slider/#checkpoints-values-distribution","title":"Checkpoints Values Distribution","text":"<p><code>CheckpointValuesDistribution</code> provides a more convinient way to customize distribution. It is based on the list of \"checkoints\" where each one of them is placed along the SliderTrack and comes with specific values.</p> <p>Lets say we have slider from 0 to 100, and we want our users to have more precise choise along the range of 0 to 200</p> <p>Using <code>CheckpointValuesDistribution</code> we can place values between 0 and 200 at the first half of the SliderTrack while the rest of the values from 300 to 1000 will be placed in second half, making it easier to choose values between 0 and 200.</p> <pre><code>val distribution = SliderValuesDistribution.checkpoints(\n    0f to 0f, // beginging of the slider\n    0.5f to 200f, // half of the slider is now 200\n    1f to 1000f // end of the slider\n)\n</code></pre>"},{"location":"slider/#make-your-own-distribution","title":"Make your own distribution","text":"<p><code>SliderValuesDistribution</code> is a simple interface you can extend and build your own distribution.</p> <pre><code>object MyDistribution: SliderValueDistribution {\n\n     override fun inverse(value: Float): Float {\n       // inverse value\n    }\n\n    override fun interpolate(value: Float): Float {\n        // interpolate value\n    }\n}\n</code></pre>"}]}